[{"name": "app.py", "content": "from shiny import App, render, ui, reactive\nfrom faicons import icon_svg\nimport cards\nimport random\n\nimport random\n\ndef randomize_list(data_file):\n    lines = ['JavaScript', 'Python', 'Java', 'C', 'C++', 'Ruby', 'PHP', 'C#', 'Swift', 'Kotlin', 'TypeScript', 'Go', 'Rust', 'Haskell', 'Lisp', 'Lua', 'Scala', 'Scheme', 'Brainfuck', 'Whitespace', 'Flutter', 'React', 'Vue.js', 'Angular', 'Svelte', 'Next.js', 'Nuxt.js', 'Ember.js', 'Backbone.js', 'Meteor']\n    random.shuffle(lines)\n    return lines\n\ndata_file = \"data.txt\"\nvalues = randomize_list(data_file)\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_slider('cols', 'How many elements on each row?', min=1, max=10, value =6, step = 1),\n        ui.input_action_button('load', 'Start Game '),\n        ui.div(ui.input_dark_mode(mode='dark'),\n               style='margin-top: auto;'),\n        id = 'sidebar',\n        class_ = 'bg-indigo-100',\n    ),\n    ui.tags.link(rel=\"stylesheet\", href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\"),\n    ui.output_ui(\"page\"),\n)\n\ndef server(input, output, session):\n\n    @output(id='page')\n    @render.ui\n    @reactive.event(input.load)\n    def load_cards():\n        print(input.load())\n        ui.update_sidebar('sidebar', show = False)\n        ui.update_action_button('load', label = 'Restart game')\n        for val in values:\n            btn_id = val.replace('.','_').replace('#', '0').replace('+', '1')\n            cards.box_server('a', title=val, btn_id = btn_id)\n        return ui.layout_column_wrap(*[cards.box_ui('a', title=val, btn_id = val.replace('.','_').replace('#', '0').replace('+', '1')) for val in values], width=1/input.cols())\n    \n    \n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "cards.py", "content": "from shiny import render, ui, reactive, module\n\n@module.ui\ndef box_ui(title, btn_id):\n    return ui.card(ui.input_action_button(id=btn_id, label=title, class_= 'bg-green-600 h-40 text-xl'), \n                   ui.output_ui(f\"card_{btn_id}\"),\n                   id=f'c_{btn_id}',\n                   class_= \"border-none\")\n\n@module.server\ndef box_server(input, output, session, title, btn_id):\n    \n    @output(id=f\"card_{btn_id}\")\n    @render.ui\n    @reactive.event(input[f\"{btn_id}\"])\n    def toggle_button():\n        ui.remove_ui(f\"#a-{btn_id}\", immediate=True)\n        \n        return ui.input_action_button(id=btn_id+'w', label=title, class_= 'bg-red-700 h-40 text-xl')", "type": "text"}, {"name": "data.txt", "content": "JavaScript\nPython\nJava\nC\nC++\nRuby\nPHP\nC#\nSwift\nKotlin\nTypeScript\nGo\nRust\nHaskell \nLisp \nLua\nScala \nScheme \nBrainfuck \nWhitespace \nBefunge \nReact \nVue.js \nAngular \nSvelte \nNext.js \nNuxt.js \nEmber.js \nBackbone.js \nMeteor ", "type": "text"}, {"name": "icons.txt", "content": "js\npython\njava\ncuttlefish\ncuttlefish\ngem\nphp\ncode\nswift\nandroid\ncode\ngolang\nrust\nsquare-binary\nbrackets\ncode\nscala\nsuperscript\nbrain\nsquare-binary\ncode\nreact\nvuejs\nangular\nsquare-binary\narrow-right\narrow-right\nfire\nbone\nmeteor\n", "type": "text"}, {"name": "requirements.txt", "content": "shiny\nfaicons", "type": "text"}]